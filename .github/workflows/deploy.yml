name: Deploy To EC2

on:
  push:
    branches:
      - main

jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application-prod.yml 파일 만들기
        run: echo "${{ secrets.APPLICATION_PROPERTIES}}" > ./src/main/resources/application-prod.yml

      - name: 테스트 및 빌드하기
        run: ./gradlew clean build

      - name: AWS Resources에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR에 로그인하기
        id : login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 현재 디렉토리 파일 확인
        run: ls -al

      - name: 현재 경로
        run: pwd

      - name: Dockerfile 실제 위치 확인
        run: find . -name Dockerfile

      - name: Docker 이미지를 생성
        run: docker build -t auctify-server .
        ##      - name: Docker 이미지를 생성
        #        run: docker build -t auctify-server .
      - name: Docker 이미지에 Tag 붙이기
        run: docker tag auctify-server ${{ steps.login-ecr.outputs.registry }}/auctify_server:latest
      - name: EC2의 SSH 포트 22 접근 가능 여부 확인
        run: |
          nc -zv ${{ secrets.EC2_HOST }} 22 || echo "❌ 포트 접근 불가 "
      - name: 컨테이너 로그 출력 (에러 디버깅용)
        run: docker logs auctify_server || echo "컨테이너가 아직 안 떠 있음"
      - name: SSH로 EC2에  접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST}}
          username: ${{ secrets.EC2_USERNAME}}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22  # 여기에 추가
          script_stop: true
          script: |
            docker stop auctify_server || true
            docker rm auctify_server || true
            docker pull ${{ steps.login-ecr.outputs.registry }}/auctify_server:latest
            echo "✅ Docker 컨테이너 실행"
            docker run -d --name auctify_server -p 8080:8080 ${{ steps.login-ecr.outputs.registry }}/auctify_server:latest
            echo "✅ 컨테이너 상태 확인"
            docker ps -a
            echo "✅ 컨테이너 로그 출력"
            docker logs auctify_server || echo "컨테이너 로그 없음"